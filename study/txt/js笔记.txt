行为，表现，结构

交互：数据进行互动

网页有2个引擎.

console.log
document.log
window.alert{一般情况下window可去掉}

调试：bug  debug

1个变量仅声明未赋值会显示undefined



编写JS：
1.通过控制台consle   .   log
            控制台   的   控制台接受字符串参数并且在控制台输出内容
2
3
4

调试：bug debug

什么是变量：内存中一块存储一个数据的空间，再起一个名字。程序中每一个数据都需要先用变量保存，再调用
1.声明变量：在内存中创建一个新变量的过程，不能使用保留字  命名规范
2赋值：将数据保存在变量中
	变量名=数据（=就是赋值的意思）
	建议：声明变量的时候就赋值

***注：1.给未声明的变量赋值是不会出错的，因为程序会在window范围内自动创建同名变量 再赋值
       2.给未声明变量取值会报错
	ReferenceError:找不到对象
       3.变量之间赋值
	  变量1=变量2
	  将变量2中的数据复制一个副本放到变量一中
       4.声明提前问题：在执行JS脚本之前，js引擎会提前阅读程序中所有的var变量集中的程序最开始的位置声明，赋值留在原地

常量：一旦创建，不可改变的值
字面量：数字 字符串

----------------
数据类型2大类
1.原始数据类型：直接保存在变量本地的数据类型；
  有5大类
		Number （数字）
		String （字符串）
		Boolean （布尔）
		undefind
		null   （不指向任何地址）
	typeof 关键字 检查数据类型
①number：js专门存储数字的类型
	十进制
	八进制		0 0o O0
	十六进制	0x 
	Infinity：无穷大
	NaN:Not a Number 不是数字
	toFixed(2) 表示保留小数点后2位数字
	1 1000
	所占空间大小和数字大小没什么关系
	NAN和任何类型比较都是返回false
②string:专门保存一串文字的数据类型 必须由""包括
	字符串内容一旦创建就不可改变；想改变就只能创建新的字符串去代替旧的字符串；
③boolean :true(1) false(0)
④
⑤

number+string  连接

2.引用数据类型：不保存在变量本地的数据类型；

--------------------------------------------
***数据类型转换
****运算符和表达式
*****逻辑运算（看情况）
1.数据类型转换
js是一门弱类型编程语言
	1.js在声明变量时不必提前规定变量数据类型
	2.在赋值时；根据存入数据；动态决定数据类型，同一变量可以保存不同类型数据
	3.运算时，js会根据需要动态改变数据类型
①隐式转换：不需要程序干预：js会根据需要自动转换数据类型
	+：
	    NAN：跟任何数据进行计算永远返回NAN
	    有字符串参与：所有类型转换成string做字符串拼接
	    没有字符串参与：所有类型转换number再做算术计算
	注：只在运算过程中转换，不会改变变量中实际存储
②强制转换
	1.任意类型转换成字符串
	    var str=xxx;
	    str.toString();str转换成n进制的string
	    js规定了一切数据都具有toString方法
	    String(str);//隐式转换原型
	2.任意类型转换成Number
	    var n=Number(X)//
	    parseInt()//整数，不能显示小数
	    parseFloat()//小数，只找到第一个小数点
	小结：非字符串类型转数字：Number
	      字符串类型转数字：parseInt()
	3.任意类型转Boolean：
	    var b=Boolean（X）；
	    除了："" 0 null NAN undefined会转成false
 
③④⑤